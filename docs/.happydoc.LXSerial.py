(S'a0277a84999586492f1027f5402c53ba'
p1
(ihappydoclib.parseinfo.moduleinfo
ModuleInfo
p2
(dp3
S'_namespaces'
p4
((dp5
S'LXSerial'
p6
(ihappydoclib.parseinfo.classinfo
ClassInfo
p7
(dp8
g4
((dp9
(dp10
S'scan_ports'
p11
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p12
(dp13
g4
((dp14
(dp15
tp16
sS'_exception_info'
p17
(dp18
sS'_parameter_names'
p19
(S'self'
p20
tp21
sS'_parameter_info'
p22
(dp23
g20
(NNNtp24
ssS'_filename'
p25
S'c:\\python24\\lib\\site-packages\\lx200\\LXSerial.py'
p26
sS'_docstring'
p27
S' check all com ports possible for LX connections'
p28
sS'_name'
p29
g11
sS'_parent'
p30
g7
sS'_comment_info'
p31
(dp32
sS'_configuration_values'
p33
(dp34
sS'_class_info'
p35
g14
sS'_function_info'
p36
g15
sS'_comments'
p37
S''
sbsS'test_baud_rates'
p38
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p39
(dp40
g4
((dp41
(dp42
tp43
sg17
(dp44
sg19
(S'self'
p45
S'portNum'
p46
tp47
sg22
(dp48
g45
(NNNtp49
sg46
(NNNtp50
ssg25
g26
sg27
S' check com port for possible speeds\n        blist[0] will be the fastest '
p51
sg29
g38
sg30
g7
sg31
g32
sg33
(dp52
sg35
g41
sg36
g42
sg37
S''
sbsS'connect'
p53
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p54
(dp55
g4
((dp56
(dp57
tp58
sg17
(dp59
S'LX200Error, "Port " + str( self.connectedPort ) + " doesn\'t appear to be connected to an LX200 port; read returned \\"" + mode + "\\""'
p60
NsS'LX200Error(str( s ) )'
p61
NsS'LX200Error("port write error:  %s" %(sys.exc_info() [ 0 ] ) )'
p62
Nssg19
(S'self'
p63
S'port'
p64
S'baud'
p65
S'ptimeout'
p66
tp67
sg22
(dp68
g65
(I1
S'9600'
Ntp69
sg66
(I1
S'10'
Ntp70
sg63
(NNNtp71
sg64
(NNNtp72
ssg25
g26
sg27
S'Opens the port and checks for a telescope\n        - port can be int: [0,...], or alpha: "COMn"  \n        - ptimeout>240 recommended for LX200GPS using auto_align'
p73
sg29
g53
sg30
g7
sg31
g32
sg33
(dp74
sg35
g56
sg36
g57
sg37
S''
sbsS'CommandString'
p75
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p76
(dp77
g4
((dp78
(dp79
tp80
sg17
(dp81
sg19
(S'self'
p82
S'cmd'
p83
S'*args'
p84
tp85
sg22
(dp86
g84
(NNNtp87
sg82
(NNNtp88
sg83
(NNNtp89
ssg25
g26
sg27
S"issues a command to the telescope, and awaits a string response \n        terminated by a '#'. returns string"
p90
sg29
g75
sg30
g7
sg31
g32
sg33
(dp91
sg35
g78
sg36
g79
sg37
S''
sbsS'CommandBlind'
p92
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p93
(dp94
g4
((dp95
(dp96
tp97
sg17
(dp98
sg19
(S'self'
p99
S'cmd'
p100
S'*args'
p101
tp102
sg22
(dp103
g101
(NNNtp104
sg99
(NNNtp105
sg100
(NNNtp106
ssg25
g26
sg27
S'simply packages up command letters in #: # and sends to telescope'
p107
sg29
g92
sg30
g7
sg31
g32
sg33
(dp108
sg35
g95
sg36
g96
sg37
S''
sbsS'__repr__'
p109
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p110
(dp111
g4
((dp112
(dp113
tp114
sg17
(dp115
sg19
(S'self'
p116
tp117
sg22
(dp118
g116
(NNNtp119
ssg25
g26
sg27
S'Return a representation string.\n        '
p120
sg29
g109
sg30
g7
sg31
g32
sg33
(dp121
sg35
g112
sg36
g113
sg37
S''
sbsS'set_baud_rate'
p122
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p123
(dp124
g4
((dp125
(dp126
tp127
sg17
(dp128
S'LX200Error( "baud " + str( baud ) + " is not one of 56.7, 38.4, 28.8, 19.2, 14.4, 9600, 4800, 2400, 1200" )'
p129
Nssg19
(S'self'
p130
S'baud'
p131
tp132
sg22
(dp133
g131
(NNNtp134
sg130
(NNNtp135
ssg25
g26
sg27
S' Set Baud Rate n, where n is an ASCII digit (1..9) with the following interpertation\n        1 56.7K\n        2 38.4K\n        3 28.8K\n        4 19.2K\n        5 14.4K\n        6 9600\n        7 4800\n        8 2400\n        9 1200\n        Returns:\n        1 At the current baud rate and then changes to the new rate for further communication'
p136
sg29
g122
sg30
g7
sg31
g32
sg33
(dp137
sg35
g125
sg36
g126
sg37
S''
sbsS'CommandBool'
p138
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p139
(dp140
g4
((dp141
(dp142
tp143
sg17
(dp144
sg19
(S'self'
p145
S'cmd'
p146
S'*args'
p147
tp148
sg22
(dp149
g147
(NNNtp150
sg145
(NNNtp151
sg146
(NNNtp152
ssg25
g26
sg27
S"issues command and checks for '0' or '1' response. returns true\n        on success. no hash returned in response."
p153
sg29
g138
sg30
g7
sg31
g32
sg33
(dp154
sg35
g141
sg36
g142
sg37
S''
sbsS'close'
p155
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p156
(dp157
g4
((dp158
(dp159
tp160
sg17
(dp161
sg19
(S'self'
p162
tp163
sg22
(dp164
g162
(NNNtp165
ssg25
g26
sg27
S' close the com port '
p166
sg29
g155
sg30
g7
sg31
g32
sg33
(dp167
sg35
g158
sg36
g159
sg37
S''
sbsS'__init__'
p168
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p169
(dp170
g4
((dp171
(dp172
tp173
sg17
(dp174
sg19
(S'self'
p175
S'debug'
p176
tp177
sg22
(dp178
g176
(I1
S'False'
Ntp179
sg175
(NNNtp180
ssg25
g26
sg27
S'Constructor.\n        Arguments: serial port where the LX200 is connected\n        Note: \n        two ports can be opened on the LX200\n        - access to the port settings trough Python properties \n        - port numbering starts at zero, no need to know the platform dependant port\n          name in the user program\n        - port name can be specified if access through numbering is inappropriate   \n        \n        if self.debug == True, port reads will return the last command chars, \n        and no scope need be connected\n        '
p181
sg29
g168
sg30
g7
sg31
g32
sg33
(dp182
sg35
g171
sg36
g172
sg37
S''
sbsS'read_to_hash'
p183
(ihappydoclib.parseinfo.functioninfo
FunctionInfo
p184
(dp185
g4
((dp186
(dp187
tp188
sg17
(dp189
sg19
(S'self'
p190
tp191
sg22
(dp192
g190
(NNNtp193
ssg25
g26
sg27
S'reads from port until hash encountered and returns '
p194
sg29
g183
sg30
g7
sg31
g32
sg33
(dp195
sg35
g186
sg36
g187
sg37
S''
sbstp196
sg25
g26
sg27
S''
sS'_class_member_info'
p197
(lp198
sg29
g6
sg30
g2
sg31
g32
sS'_base_class_info'
p199
(lp200
sg33
(dp201
sg35
g9
sg36
g10
sg37
S''
sbs(dp202
tp203
sS'_import_info'
p204
(ihappydoclib.parseinfo.imports
ImportInfo
p205
(dp206
S'_named_imports'
p207
(dp208
sS'_straight_imports'
p209
(lp210
sbsg25
g26
sg27
S''
sg29
S'LXSerial'
p211
sg30
Nsg31
g32
sg33
(dp212
S'include_comments'
p213
I1
sS'cacheFilePrefix'
p214
S'.happydoc.'
p215
sS'useCache'
p216
I1
sS'docStringFormat'
p217
S'StructuredText'
p218
ssg35
g5
sg36
g202
sg37
S''
sbt.